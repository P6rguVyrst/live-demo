diff --git a/verypythonproblems/requirements.txt b/verypythonproblems/requirements.txt
index da4488c..34ae1b9 100644
--- a/verypythonproblems/requirements.txt
+++ b/verypythonproblems/requirements.txt
@@ -1,5 +1,6 @@
 coderedcms
 django-prometheus
+prometheus_client
 
 # django_sendmail_backend enables sending email from your web host server.
 # Remove this if using a different email backend.
diff --git a/verypythonproblems/values.yaml b/verypythonproblems/values.yaml
index 6241d12..78b42cc 100644
--- a/verypythonproblems/values.yaml
+++ b/verypythonproblems/values.yaml
@@ -2,7 +2,7 @@
 fullnameOverride: "web"
 image:
   repository: p6rguvyrst/instrumentation-demo
-  tag: v0.0.7
+  tag: v0.0.8
   pullPolicy: Never
 service:
   type: NodePort
diff --git a/verypythonproblems/verypythonproblems/instrumentation/monitor.py b/verypythonproblems/verypythonproblems/instrumentation/monitor.py
new file mode 100644
index 0000000..d910265
--- /dev/null
+++ b/verypythonproblems/verypythonproblems/instrumentation/monitor.py
@@ -0,0 +1,7 @@
+from .prometheus.monitor import models_gauge_monitor
+import django_prometheus
+
+
+def prometheus_monitor(request):
+    models_gauge_monitor()
+    return django_prometheus.exports.ExportToDjangoView(request)
diff --git a/verypythonproblems/verypythonproblems/instrumentation/prometheus/__init__.py b/verypythonproblems/verypythonproblems/instrumentation/prometheus/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/verypythonproblems/verypythonproblems/instrumentation/prometheus/metrics.py b/verypythonproblems/verypythonproblems/instrumentation/prometheus/metrics.py
new file mode 100644
index 0000000..19f1561
--- /dev/null
+++ b/verypythonproblems/verypythonproblems/instrumentation/prometheus/metrics.py
@@ -0,0 +1,14 @@
+from prometheus_client import Gauge
+
+"""
+Prometheus Business Metrics instrumentation.
+Reference: https://github.com/prometheus/client_python
+"""
+
+
+class ModelsGauges:
+    """Monitoring definitions for Prometheus data format."""
+
+    django_model_objects = Gauge(
+        "django_model_count_total", "model label objects in database.", ["model"]
+    )
diff --git a/verypythonproblems/verypythonproblems/instrumentation/prometheus/monitor.py b/verypythonproblems/verypythonproblems/instrumentation/prometheus/monitor.py
new file mode 100644
index 0000000..b4a1e8f
--- /dev/null
+++ b/verypythonproblems/verypythonproblems/instrumentation/prometheus/monitor.py
@@ -0,0 +1,28 @@
+from .metrics import ModelsGauges
+from ..query_sets import (
+    ARTICLE_PAGE_COUNT,
+    ARTICLE_INDEX_PAGE_COUNT,
+    FORM_PAGE_COUNT,
+    FORM_PAGE_FIELD_COUNT,
+    FORM_CONFIRM_EMAIL_COUNT,
+    WEB_PAGE_COUNT,
+)
+from ..labels import (
+    ARTICLE,
+    ARTICLE_INDEX,
+    FORM,
+    FORM_FIELD,
+    EMAIL,
+    WEBPAGE,
+)
+GAUGE = ModelsGauges()
+
+
+def models_gauge_monitor():
+
+    GAUGE.django_model_objects.labels(ARTICLE).set(ARTICLE_PAGE_COUNT)
+    GAUGE.django_model_objects.labels(ARTICLE_INDEX).set(ARTICLE_INDEX_PAGE_COUNT)
+    GAUGE.django_model_objects.labels(FORM).set(FORM_PAGE_COUNT)
+    GAUGE.django_model_objects.labels(FORM_FIELD).set(FORM_PAGE_FIELD_COUNT)
+    GAUGE.django_model_objects.labels(EMAIL).set(FORM_CONFIRM_EMAIL_COUNT)
+    GAUGE.django_model_objects.labels(WEBPAGE).set(WEB_PAGE_COUNT)
diff --git a/verypythonproblems/verypythonproblems/instrumentation/query_sets.py b/verypythonproblems/verypythonproblems/instrumentation/query_sets.py
new file mode 100644
index 0000000..6858ba1
--- /dev/null
+++ b/verypythonproblems/verypythonproblems/instrumentation/query_sets.py
@@ -0,0 +1,33 @@
+from website.models import (
+    ArticlePage,
+    ArticleIndexPage,
+    FormPage,
+    FormPageField,
+    FormConfirmEmail,
+    WebPage,
+)
+
+"""
+QuerySet: https://docs.djangoproject.com/en/2.1/ref/models/querysets/
+
+Internally, a QuerySet can be constructed, filtered,
+sliced, and generally passed around without actually
+hitting the database. No database activity actually
+occurs until you do something to evaluate the queryset.
+
+Note: If you only need to determine the number of records
+in the set (and don’t need the actual objects), it’s much
+more efficient to handle a count at the database level
+using SQL’s SELECT COUNT(*). Django provides a count()
+method for precisely this reason.
+
+object.count(): https://docs.djangoproject.com/en/2.1/ref/models/querysets/#django.db.models.query.QuerySet.count
+
+"""
+
+ARTICLE_PAGE_COUNT = ArticlePage.objects.count()
+ARTICLE_INDEX_PAGE_COUNT = ArticleIndexPage.objects.count()
+FORM_PAGE_COUNT = FormPage.objects.count()
+FORM_PAGE_FIELD_COUNT = FormPageField.objects.count()
+FORM_CONFIRM_EMAIL_COUNT = FormConfirmEmail.objects.count()
+WEB_PAGE_COUNT = WebPage.objects.count()
diff --git a/verypythonproblems/verypythonproblems/urls.py b/verypythonproblems/verypythonproblems/urls.py
index bdc026f..5cab977 100644
--- a/verypythonproblems/verypythonproblems/urls.py
+++ b/verypythonproblems/verypythonproblems/urls.py
@@ -5,6 +5,7 @@ from wagtail.documents import urls as wagtaildocs_urls
 from coderedcms import admin_urls as coderedadmin_urls
 from coderedcms import search_urls as coderedsearch_urls
 from coderedcms import urls as codered_urls
+from verypythonproblems.instrumentation.monitor import prometheus_monitor
 
 urlpatterns = [
     # Admin
@@ -18,7 +19,7 @@ urlpatterns = [
     path('search/', include(coderedsearch_urls)),
 
     # Instrumentation
-    path('', include('django_prometheus.urls')),
+    path('metrics', prometheus_monitor, name='prometheus-django-metrics'),
 
     # For anything not caught by a more specific rule above, hand over to
     # the page serving mechanism. This should be the last pattern in
diff --git a/verypythonproblems/website/migrations/0003_auto_20190609_1336.py b/verypythonproblems/website/migrations/0003_auto_20190609_1336.py
new file mode 100644
index 0000000..e8737ca
--- /dev/null
+++ b/verypythonproblems/website/migrations/0003_auto_20190609_1336.py
@@ -0,0 +1,18 @@
+# Generated by Django 2.1.8 on 2019-06-09 17:36
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('website', '0002_initial_data'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='formpage',
+            name='reply_address',
+            field=models.CharField(blank=True, help_text='Optional - to reply to the submitter, specify the email field here. For example, if a form field above is labeled "Your Email", enter: {{ your_email }}', max_length=255, verbose_name='Reply-to address'),
+        ),
+    ]
